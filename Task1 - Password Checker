import re

class PasswordStrengthChecker:
    def __init__(self):
        self.common_passwords = ["123456", "password", "qwerty", "111111", "123123"]

    def check_length(self, password):
        return len(password) >= 8

    def check_complexity(self, password):
        # Checking for lowercase, uppercase, digits, and special characters
        has_lower = re.search(r'[a-z]', password)
        has_upper = re.search(r'[A-Z]', password)
        has_digit = re.search(r'[0-9]', password)
        has_special = re.search(r'[@#$%^&*!]', password)
        return all([has_lower, has_upper, has_digit, has_special])

    def check_uniqueness(self, password):
        # Penalizing for repeated sequences or characters
        return len(set(password)) / len(password) > 0.7  # More than 70% unique characters

    def check_common_patterns(self, password):
        # Avoiding common passwords
        return password not in self.common_passwords

    def assess_password(self, password):
        if not self.check_length(password):
            return "Weak: Password is too short. It should be at least 8 characters."
        
        if not self.check_complexity(password):
            return "Weak: Password should contain lowercase, uppercase letters, digits, and special characters."
        
        if not self.check_uniqueness(password):
            return "Weak: Password has too many repeated characters or sequences."
        
        if not self.check_common_patterns(password):
            return "Weak: Password is too common and easily guessable."
        
        return "Strong: Your password is strong!"

# Example Usage
checker = PasswordStrengthChecker()

password = input("Enter a password to check its strength: ")
result = checker.assess_password(password)
print(result)
